/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package Control;

import Control.Interface.Drawable;
import Model.CalendarMethods;
import Model.Datatypes.BorderImage;
import Model.Datatypes.Month;
import Model.Datatypes.WeekDay;
import Model.SixteenBitModel;
import View.BackgroundComponent;
import View.BitButton;
import View.DayCard;
import View.Picture;
import java.awt.Color;
import java.awt.Point;
import java.util.ArrayList;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.prefs.Preferences;

/**
 * Class that sets the position and size of the components that will be drawn
 * on the canvas.
 * @author fredrikmakila
 */
public class ComponentLoader extends CalendarMethods {
    private ArrayList<Drawable> list = new ArrayList<Drawable>();
    private int dcHeight = 60;
    private int dcWidth = 65;
    private int wdHeight = 40;
    private int wHeight = 60;
    private int mHeight = 50;
    private int btnWidth = 120;
    private int btnHeight = 60;
    private int addwHeight = 600;
    private int addwWidth = 240;
    private int boxWidth = 240;
    private int boxHeight = 90;
    private int taskinfoHeight = 300;
    private int dcTotalWidth;
    private int dcTotalHeight;
    private int wdWidth = 65;
    private int wdTotalWidth = 0;
    private int wWidth = 50;
    private int wTotalHeight = 0;
    private int mWidth;
    private int x = 0;
    private int y = 0;
    private int xPos;
    private int yPos;
    private int month;
    private int year;
    private int day;
    private AtomicInteger id = new AtomicInteger();
    private int totalCalendarWidth;
    private int totalCalendarHeight;
    private SixteenBitModel model;
    
    private Preferences prefs;
    
    private String[] weekDay = {
        "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"
    };       
    
    /**
     * Constructor that loads all the components.
     */
    public ComponentLoader() {
        prefs = Preferences.userNodeForPackage(getClass());
        loadResource("Model.Database.imageResource");
        month = getMonth();
        year = getYear();
        day = getDay();
        model = SixteenBitModel.getInstance();
        model.setYear(year);
        set();
    }
   
    

    private void loadResource(String url) {
        prefs.put("resource", url);        
    }
    
    private void createMonthView() {
        //Creates the weekdays
        for(int i = 0; i<weekDay.length; i++) {
            String wd = weekDay[i];
            xPos = i*wdWidth+wWidth;
            yPos = 0+mHeight;
            DayCard wdc = new DayCard(xPos, yPos, wdWidth, wdHeight, new WeekDay(wd).get(), id.incrementAndGet());
            wdc.setBackgroundColor(Color.GREEN);
            //wdc.setBorderType(new BorderImage("chain"));
            wdc.setFontSize(8);
            model.updateObservableRegistration().addObserver(wdc);
            list.add(wdc);
            wdTotalWidth += wdWidth;
        }
        
        //Creates the month
        xPos = 0;
        yPos = 0;
        mWidth = wWidth + wdTotalWidth;
        DayCard mc = new DayCard(xPos, yPos, mWidth, mHeight, new Month(month).get(), id.incrementAndGet());
        mc.setBackgroundColor(Color.red);
        //mc.setBorderType(new BorderImage("tiny"));
        model.updateObservableRegistration().addObserver(mc);
        model.setMonth(month);
        model.setMonthCardId(id.get());
        list.add(mc);
        
        //Creates the week numbers
        ArrayList array = getWeekNumber(year, month);
        model.setFirstWeekCardId(id.get()+1);
        for(int i = 0; i<array.size(); i++) {
            int week = (Integer) array.get(i);
            xPos = 0;
            yPos = i*wHeight+wdHeight+mHeight;
            DayCard wc = new DayCard(xPos, yPos, wWidth, wHeight, "" + week, id.incrementAndGet());
            wc.setBackgroundColor(Color.YELLOW);
            //wc.setBorderType(new BorderImage("chain"));
            model.updateObservableRegistration().addObserver(wc);
            model.selectedObservableRegistration().addObserver(wc);
            list.add(wc);
            wTotalHeight += wHeight;
        }
        model.setLastWeekCardId(id.get());
        
        //Creates the days in the previous month
        model.setFirstDayCardId(id.get()+1);
        int xStart = getWeekDay(year, month);
        int numDays;
        int prevMonth;
        int prevYear;
        if(month -1 < 0) {
            prevMonth = 11;
            prevYear = year - 1;
        }
        else {
            prevMonth = month -1;
            prevYear = year;
        }
        numDays = getNumberOfDays(prevYear, prevMonth);
        numDays = numDays - xStart;
        for(int i = 0; i < xStart; i++) {
            int d = numDays + i + 1;
            xPos = i*dcWidth+wWidth;
            yPos = wdHeight+mHeight;
            DayCard dc = new DayCard(xPos, yPos, dcWidth, dcHeight, "" + d, id.incrementAndGet());
            dc.setBackgroundColor(new Color(0, 200, 255, 100));
            model.selectedObservableRegistration().addObserver(dc);
            model.updateObservableRegistration().addObserver(dc);
            list.add(dc);
        }
        //Creates the days in the month
        for(int i = xStart; i<getNumberOfDays(year, month) + xStart; i++) {
            int d = i - xStart + 1;
            xPos = (i%7)*dcWidth+wWidth;
            yPos = (i/7)*dcHeight+wdHeight+mHeight;
            DayCard dc = new DayCard(xPos, yPos, dcWidth, dcHeight, "" + d, id.incrementAndGet());
            if(d == getDay()) {
                dc.setBackgroundColor(Color.RED);
            }
            model.selectedObservableRegistration().addObserver(dc);
            model.updateObservableRegistration().addObserver(dc);
            list.add(dc);
        }
        //Next month
        int nextMonth;
        int nextYear;
        if(month + 1 > 12) {
            nextMonth = 0;
            nextYear = year + 1;
        }
        else {
            nextMonth = month - 1;
            nextYear = year;
        }
        for(int i = (xPos-wWidth)/dcWidth +1; i < 7; i++) {
            int d = i;
            xPos = i*dcWidth + wWidth;
            DayCard dc = new DayCard(xPos, yPos, dcWidth, dcHeight, "" + d, id.incrementAndGet());
            dc.setBackgroundColor(new Color(0, 200, 255, 100));
            model.selectedObservableRegistration().addObserver(dc);
            model.updateObservableRegistration().addObserver(dc);
            list.add(dc);
        }
        model.setLastDayCardId(id.get());
        
        dcTotalWidth = dcWidth*7;
        dcTotalHeight = yPos*dcHeight;
        
        totalCalendarWidth = wWidth + dcTotalWidth;
        totalCalendarHeight = mHeight + dcTotalHeight;
        
    }
    
    private void createMenu() {
        //Menu starts here
        xPos = totalCalendarWidth;
        yPos = 0;
        BackgroundComponent rgtwindow = new BackgroundComponent(xPos, yPos, addwWidth, addwHeight);
        //rgtwindow.setBorderType(new BorderImage("blob"));
        list.add(rgtwindow);
        
        BackgroundComponent box = new BackgroundComponent(xPos, yPos, boxWidth, boxHeight);
        box.setBackgroundColor(Color.cyan);
        //box.setBorderType(new BorderImage("blob"));
        list.add(box);
        
        yPos = mHeight + wdHeight;
        BitButton add = new BitButton(xPos, yPos, btnWidth, btnHeight, "Add task", id.incrementAndGet());
        add.setBackgroundColor(Color.ORANGE);
        //add.setBorderType(new BorderImage("blob"));
        model.selectedObservableRegistration().addObserver(add);
        model.deSelectedObservableRegistration().addObserver(add);
        list.add(add);
        
        yPos = mHeight + wdHeight + btnHeight;
        BitButton edit = new BitButton(xPos, yPos, btnWidth, btnHeight, "Edit task", id.incrementAndGet());
        edit.setBackgroundColor(Color.ORANGE);
        //edit.setBorderType(new BorderImage("blob"));
        list.add(edit);
        
        xPos = xPos + btnWidth;
        yPos = mHeight + wdHeight;
        BitButton remove = new BitButton(xPos, yPos, btnWidth, btnHeight, "Remove task", id.incrementAndGet());
        remove.setBackgroundColor(Color.ORANGE);
        //remove.setBorderType(new BorderImage("blob"));
        list.add(remove);
        
        yPos = mHeight + wdHeight + btnHeight;
        BitButton comp = new BitButton(xPos, yPos, btnWidth, btnHeight, "NÃ¥got", id.incrementAndGet());
        comp.setBackgroundColor(Color.ORANGE);
        //comp.setBorderType(new BorderImage("blob"));
        list.add(comp);
        
        xPos = totalCalendarWidth;
        yPos = mHeight + wdHeight + 2*btnHeight;
        BackgroundComponent taskinfo = new BackgroundComponent(xPos, yPos, btnWidth*2, wdHeight);
        taskinfo.setBackgroundColor(Color.cyan);
        //taskinfo.setBorderType(new BorderImage("blob"));
        list.add(taskinfo);
        
        yPos = mHeight + 2*wdHeight + 2*btnHeight;
        BackgroundComponent infobox = new BackgroundComponent(xPos, yPos, boxWidth, taskinfoHeight);
        infobox.setBackgroundColor(Color.WHITE);
        //infobox.setBorderType(new BorderImage("blob"));
        list.add(infobox);
    }
    
    private void createGraphics() {
        //Draws some silly graphics
        xPos = 0;
        Picture p = new Picture(0, 0, "walk");
        yPos = 620-p.getHeight();
        p.setLocation(new Point(xPos, yPos));
        list.add(p);
        
        xPos = xPos + p.getWidth();
        Picture p1 = new Picture(xPos, yPos, "walk");
        list.add(p1);
        
        xPos = xPos + p.getWidth();
        Picture p2 = new Picture(xPos, yPos, "walk");
        list.add(p2);
        
        xPos = xPos + p.getWidth();
        Picture p3 = new Picture(xPos, yPos, "walk");
        list.add(p3);
        
        xPos = xPos + p.getWidth();
        Picture p4 = new Picture(xPos, yPos, "walk");
        list.add(p4);
        
        xPos = xPos + p.getWidth();
        Picture p5 = new Picture(xPos, yPos, "house");
        p5.setLocation(new Point(xPos, yPos + p.getHeight() - p5.getHeight()));
        list.add(p5);
        
        xPos = xPos + p5.getWidth();
        Picture p6 = new Picture(xPos, yPos, "tall_house");
        p6.setLocation(new Point(xPos, yPos + p.getHeight() - p6.getHeight()));
        list.add(p6);
        
        xPos = xPos + p6.getWidth()+10;
        yPos = yPos + p.getHeight() - p6.getHeight();
        Picture p7 = new Picture(xPos, yPos, "moon");
        list.add(p7);
        
        xPos = xPos + p6.getWidth() - p6.getWidth() - 10;
        yPos = 620 - p.getHeight();
        Picture p8 = new Picture(xPos, yPos, "walk");
        list.add(p8);
        
        xPos = xPos + p6.getWidth();
        yPos = 620 - p.getHeight()-100;
        Picture p9 = new Picture(xPos, yPos, "rubic");
        list.add(p9);         
    }
    /**
     * Method to load components, called by the constructor.
     */
    private void set() {
        createMonthView();
        createGraphics();
        createMenu();
    }
    
    /**
     * Getter for this class. 
     * Returns an arraylist containing all the components that was defined in set.
     * @return an arraylist with drawables
     */
    public ArrayList<Drawable> get() {
        return list;
    }
    

}
