/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package Model.Datatypes;

import Control.HelpSystem;
import View.MyGlassPane;

import java.awt.*;

/**
 * Instruction class for different instructions generated by the help system and
 * interpreted by the glass pane. All instructions contains a command
 * that the glasspane can understand and perform the appropriate action. 
 * A command also contains the object for which the command should be performed. 
 * 
 * @author fredrikmakila
 * @see HelpSystem
 * @see MyGlassPane
 */
public class Instruction {
    //*******COMMANDS**********/
    /**
     * Rotation command
     */
    public static final String ROTATE = "rotate";
    /**
     * Move command
     */
    public static final String MOVE = "move";
    /**
     * Popup command
     */
    public static final String POPUP = "popup";
    /**
     * User input command
     */
    public static final String USERINPUT = "userinput";
    /**
     * Start command
     */
    public static final String START_INSTRUCTION = "start";
    /**
     * Stop command
     */
    public static final String STOP_INSTRUCTION = "stop";
    
    //***********OBJECTS*************
    /**
     * The Lid/Hatch object
     */
    public static final String LID = "lid";
    /**
     * The zeppelin object
     */
    public static final String ZEPPELIN = "zeppelin";
    
    //*********DISPLAY OF POPUP*******
    /**
     * Start displaying popup
     */
    public static final boolean START = true;
    /**
     * Stop displaying popup
     */
    public static final boolean STOP = false;
    
    //*******ALIGNMENT***********
    
    /**
     * Left alignment of popup
     */
    public static final boolean LEFT = false;
    /**
     * Right alignment of popup
     */
    public static final boolean RIGHT = true;
    

    //*************POPUP GUIDE****************
    /**
     * Instruction for how to change month
     */
    public static final String NEXT_MONTH = "Clicking on this arrow will make the calendar"
            + " change month to the next month.";
    
    /**
     * instruction for the previous month button
     */
    public static final String PREVIOUS_MONTH = "This arrow will make the calendar "
            + "change month to the previous month.";
    
    
    /**
     * instruction for the priority checkboxes 
     */
    public static final String CHECKBOX = "Clicking on these checkboxes will make all"
            + " daycards that contains low, normal or high priority tasks to pulsate. "
            + "The color of the checkboxes denotes which color the daycards will have when they "
            + "pulsate.";
    
     
    /**
     * instructions for the undo/redo buttons
     */
    public static final String UNDOREDO = "Here you can choose to undo or redo an action you have done. "
            + "You can undo the deleting or adding of a task or event.";

    /**
     * instructions for the help system
     */
    public static final String HELPSYSTEM = "This button is for starting the helpsystem that you are currently "
            + "watching. But maybe you already figured that one out ;)";
    
    
    /**
     * instructions for the daycard buttons
     */
    public static final String DAYCARD = "Clicking on one of the days in the current month will open up a popup "
            + "window that will allow you to view, add and delete events and tasks. The yellow daycards in this view "
            + "are days of the next month while the blue ones are from the previous month. It is "
            + "only possible to interact with the days in the current month, that is the grey ones.";
    
    
    private final Point point;
    private final double rotation;
    private final String command;
    private final String object;
    private final String message;
    private final boolean display;
    private final boolean alignment;


    /**
     * Constructor for this class. 
     * Primarily designed for use when you want to move an object
     * 
     * @param command The command for this instruction
     * @param point The position that the object will move to
     * @param object The object that will be affected
     */    
    
    public Instruction(String command, Point point, String object) {
        this.point = point;
        rotation = 0;
        this.command = command;
        this.object = object;
        message = null;
        display = false;
        alignment = true;
    }
    
    
    /**
     * Another constructor for this class.
     * Primarily designed for use when you want to move an object
     * 
     * @param command The command for this instruction
     * @param rotation The rotation value that the object will rotate with
     * @param object The object that will rotate
     */    
    public Instruction(String command, double rotation, String object) {
        this.rotation = rotation;
        this.point = null;
        this.command = command;
        this.object = object;
        message = null;
        display = false;
        alignment = true;
    }
    
    /**
     * Another constructor for this class.
     * Primarily designed to display a popup message.
     * 
     * @param command The command for this instruction.
     * @param message The message that will be displayed.
     * @param point The position where the popup window will appear
     * @param display True if the popup window should be visible. Otherwise false.
     * @param alignment Sets the alignment of the popup window relative to the point. 
     * true for right, false for left.
     * 
     */    
    public Instruction(String command, String message, Point point, boolean display, boolean alignment) {
        this.command = command;
        this.message = message;
        this.rotation = 0;
        this.point = point;
        this.object = null;
        this.display = display;
        this.alignment = alignment;
    }

    /**
     * Gets wheter the popup should be visible or not
     * @return the current display value
     */   
    public boolean getDisplay() {
        return display;
    }
    
    /**
     * Gets the current command as a string
     * @return the current command
     */   
    public String getCommand() {
        return command;
    }
    
    /**
     * Gets the current location as a point
     * @return the current point
     */   
    public Point getLocation() {
        return point;
    }
    
    /**
     * Gets the current rotation as a double
     * @return the current rotation
     */   
    public double getRotation() {
        return rotation;
    }
    
     /**
     * Gets the object as a string
     * @return the current object
     */   
    public String getObject() {
        return object;
    }
    
    /**
     * Gets the message as a string
     * @return the current message 
     */ 
    public String getMessage() {
        return message;
    }
    
    /**
     * Gets the current alignment. True is 
     * right alignment and false is left alignment.
     * @return the current alignment
     */ 
    public boolean getAlignment() {
        return alignment;
    }


}
