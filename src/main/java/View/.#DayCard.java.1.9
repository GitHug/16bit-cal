package View;

import Control.Actions.SelectedEvent;
import Control.Actions.UpdateEvent;
import Model.Datatypes.BorderImage;
import Model.SixteenBitModel;
import java.awt.*;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;

/**
 * The graphical representation of a day with tasks and events
 * @author Robin
 * @author fredrikmakila
 */
@SuppressWarnings("LeakingThisInConstructor")
public class DayCard extends CustomComponent {
    private String text;
    private Color currentColor;
    private BorderImage defaultBorder = new BorderImage("beam");
    //private JButton button = new JButton();
    private Point p;
    private Dimension d;
    private boolean isSelected;
    private int fontSize = 12;
    private SixteenBitModel model;
    private Color textColor = Color.DARK_GRAY;
    private boolean showBorder = true;
    private boolean borderVisible = true;
    private BorderImage currentBorder;
    private BufferedImage image;
    private Font font;

    
    /**
     * Constructor to create a daycard containing a string.
     * @param x The x-position of the daycard
     * @param y The y-position of the daycard
     * @param width The width of the daycard
     * @param height The height of the daycard
     * @param string The string to be displayed for the daycard
     */
    public DayCard(int x, int y, int width, int height, String text, int id){
        super(x, y, width, height);
        this.text = text;
        setBackgroundColor(Color.lightGray);
        setBorderByName(defaultBorder);
        setId(id);
        model = SixteenBitModel.getInstance();
        GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
        String []fontFamilies = ge.getAvailableFontFamilyNames(); 
        font = new Font(fontFamilies[0], Font.BOLD, fontSize);
    }
    
    /**
     * Convenience method for public access to setBorderByName.
     * @param border The name of the new border.
     * @see BorderImage
     */
    private void setBorderByName(BorderImage border) {
        currentBorder = border;
        setBorderType(border);
    }
    
    /**
     * Not yet implemented
     * @param o Not yet implemented
     * @param arg Not yet implemented
     */
    @Override
    public void notify(Object arg) {
        if(arg instanceof SelectedEvent) { 
            setSelected((SelectedEvent) arg);
        }
        if(arg instanceof UpdateEvent) {
            updateDayCard((UpdateEvent) arg);
        }

    }
    
    public void setFontSize(int size) {
        fontSize = size;
    }
    
    private void setSelected(SelectedEvent event) {
        int selectedId = (Integer) event.getId();
        if (getId() == selectedId && !getSelected()) {
            isSelected(true);
            currentColor = getBackgroundColor();
            System.out.println("MY ID IS " + getId());
            setBackgroundColor(currentColor.darker());
            repaint();
        }
        else if (getSelected()){
            isSelected(false);
            setBackgroundColor(currentColor);
            repaint();
        }
    }
    
    private void updateDayCard(UpdateEvent event) {
        int selectedId = (Integer) event.getId();
        if(getId() == selectedId) {
            text = event.getString();
            textColor = event.getTextColor();
            showBorder = event.getShowBorder();
            if(borderVisible && !showBorder) {
                setBorderType(null);
                borderVisible = false;
            }
            else if(!borderVisible && showBorder) {
                setBorderType(currentBorder);
                borderVisible = true;
            }
            setBackgroundColor(event.getColor());
            repaint();
        }
    }
    
    /**
     * Draws the daycard
     * @param g The grahpics for the daycard
     */
    @Override
    public void draw(Graphics g) {
        p = getLocation();
        d = getSize();
        if(image == null) {
            image = (BufferedImage) createImage(d.width, d.height);
            Graphics2D g2 = (Graphics2D) image.getGraphics();
            g2.setRenderingHint(
                RenderingHints.KEY_ANTIALIASING,                
                RenderingHints.VALUE_ANTIALIAS_ON);
            //Create a rectangle
            g2.setColor(getBackgroundColor());
            g2.fillRect(p.x, p.y, d.width, d.height);
            g2.setFont(font);
            //Gets the width and height of the string
            Rectangle2D stringBounds = g2.getFontMetrics().getStringBounds(text, g2);
            g2.setColor(textColor);
            g2.drawString(text, p.x + (int) (d.width/2 - stringBounds.getCenterX()), p.y + (int) (d.height/2 - stringBounds.getCenterY()));
        }
        Graphics2D g2d = (Graphics2D) g;
        g2d.drawImage(image, p.x, p.y, d.width, d.height, this);

        //Sets antialiasing for smoother shapes
        
        //Set font color

        
        //Gets available fonts and sets a font

        
    }
}
