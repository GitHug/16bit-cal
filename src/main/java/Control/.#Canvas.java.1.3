package Control;

import Control.Interface.Drawable;
import Model.SixteenBitModel;
import View.CustomComponent;
import View.DayCard;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.ArrayList;
import javax.swing.JPanel;

/**
 * Empty panel that is used to draw components on. 
 * @author Robin Horneman
 */
@SuppressWarnings("unchecked")
public class Canvas extends JPanel {
    private ArrayList<Drawable> list = new ArrayList<Drawable>();
    private ArrayList<Drawable> dcList = new ArrayList<Drawable>();
    private int daycardCount;
    private Drawable drawable;
    private SixteenBitModel model;
    private int id = 0;
    
    /**
     * Simple constructor.
     * @param list The list with drawables that will be drawn
     */
    public Canvas(SixteenBitModel model, ArrayList ... args){
        setFocusable(true);
        this.model = model;
        for(int i = 0; i<args.length; i++) {
            list.addAll((ArrayList<Drawable>) args[i]);
        }
        //Allow the Canvas to read the mouseclicks
        addMouseListener(new Mouse(this));
    }
    
    
    /**
     * A getter
     * @return Returns all Drawables on this Canvas as a list
     */
    public ArrayList<Drawable> getList(){
        return list;
    }
    
    public ArrayList<Drawable> getDayCardList() {
        for(int i = 0; i < list.size(); i++) {
            dcList.add(list.get(i));
            System.out.println();
        }
        return dcList;
    }
    
    /**
     * Class that acts as a simple mouse listener with overridden methods
     */
    public class Mouse implements MouseListener
    {
        private Canvas currentCanvas;
        
        /**
         * The constructor of a Mouse
         * @param can The Canvas associated to this mouselistener
         */
        public Mouse(Canvas can){
            currentCanvas = can;
        }
        
        /**
         * The function that handles mouseclicks
         * @param e The mouse event that triggered this function
         */
        @Override
        public void mousePressed(MouseEvent e)
        {
            Point p = new Point(e.getX(), e.getY()); //Get the location of the mouse
            CustomComponent c;
            ArrayList<Drawable> list = currentCanvas.getList();
            for(int i =0; i<list.size(); i++){
                if(list.get(i).within(p)){
                    c = (CustomComponent) list.get(i);
                    id = c.getId();
                    model.setSelected(id);
                    System.out.println("Clicked inside: "+i);
                    System.out.println("Click ("+p.x+","+p.y+")");
                }
            }
            
        }

        /**
         * Not implemented.
         * @param e
         */
        @Override
        public void mouseClicked(MouseEvent e) {
        }

        /**
         * Not implemented.
         * @param e
         */
        @Override
        public void mouseReleased(MouseEvent e) {
            model.setDeSelected(id);
        }

        /**
         * Not implemented.
         * @param e
         */
        @Override
        public void mouseEntered(MouseEvent e) {}

        /**
         * Not implemented.
         * @param e
         */
        @Override
        public void mouseExited(MouseEvent e) {}
    }

    
    /**
     * Method that paints all the components from the arraylist list from the constructor.
     * @param g The Graphics component that we draw on (this Canvas)
     */
    @Override
    public void paintComponent(Graphics g){
        super.paintComponent(g);
        this.setLayout(null);
        for(int i =0; i<list.size(); i++) {
            this.add((JPanel) list.get(i));
            list.get(i).draw(g);
        }
    }
    
}
