/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import Control.Canvas;
import Control.Interface.Drawable;
import Model.Database.ResourceHandler;
import Model.Datatypes.Instruction;
import Model.SixteenBitModel;
import Utils.Debug;
import Utils.OsUtils;
import java.awt.*;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.net.URL;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JMenuBar;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.event.MouseInputAdapter;

/**
 *
 * @author fredrikmakila
 */
/**
 * We have to provide our own glass pane so that it can paint.
 */
public class MyGlassPane extends JPanel {

    private ArrayList<Drawable> list = new ArrayList<Drawable>();
    private int x;
    private int y;
    private int width;
    private int height;
    private int newX = 0;
    private int newY = 0;
    private String imgName = "zeppelin";
    private String lidImgName = "lid";
    private String url;
    private URL imageURL;
    private final Image zeppelinImage;
    private final Image lidImage;
    private BufferedImage image;
    private SixteenBitModel model;
    private Canvas canvas;
    private boolean state = true;
    private MenuBar menu;
    private int imgX = 0;
    private int imgY = 0;
    private JMenuBar menubar;
    private Instruction instruction;

    public MyGlassPane(int x, int y, int width, int height) {
        setLayout(null);
        setOpaque(false);
        //setLocation(x, y);
        //setSize(width, height);

        ResourceHandler rh = new ResourceHandler();
        url = rh.getString(imgName);
        imageURL = getClass().getClassLoader().getResource(url);
        zeppelinImage = new ImageIcon(imageURL).getImage();
        
        url = rh.getString(lidImgName);
        imageURL = getClass().getClassLoader().getResource(url);

        lidImage = new ImageIcon(imageURL).getImage();
        
        
        this.x = x;
        this.y = y;
        model = SixteenBitModel.getInstance();
        canvas = model.getCanvas();
        menu = model.getMenuBar();
        menubar = menu.getMenuBar();
        MouseAdapter mouse = new MouseAdapter(this);
        addMouseListener(mouse);
        addMouseMotionListener(mouse);
        
        if(OsUtils.isWindows()) {
            imgY = 22; //Height of menubar
        }
    }

    @Override
    public void setSize(int width, int height) {
        this.width = width;
        this.height = height;
    }

    @Override
    public void setLocation(int x, int y) {
        this.x = x;
        this.y = y;
    }

   /* @Override
    public Dimension getSize() {
        return new Dimension(img.getWidth(null), img.getHeight(null));
    }*/

    @Override
    public Point getLocation() {
        return new Point(x, y);
    }

    public void changeLocation(int newX, int newY) {
        this.newX = newX;
        this.newY = newY;
    }

    public void drawImage(BufferedImage image) {
        this.image = image;
    }
    
    public void passInstruction(Instruction instruction) {
        this.instruction = instruction;
    }

    @Override
    public void paintComponent(Graphics g) {
        //g.setColor(Color.YELLOW);
        //g.fillOval(x + newX, y + newY, 50, 50);
        Graphics2D g2 = (Graphics2D) g;
        
        if (image != null) {
            g2.drawImage(image, imgX, imgY, this);
        }
        g2.drawImage(zeppelinImage, x, y, null);
        
        if(instruction != null) {
            if(instruction.getCommand().equals(Instruction.ROTATE)) {
                g2.translate(x, lidImage.getHeight(null));
                g2.rotate(instruction.getRotation());
                Debug.debug("ROTATION " + instruction.getRotation());
            }
        }
        
        //g2.drawImage(lidImage, x, y+100, null);
        g2.drawImage(image, imgX, imgY, this);

        
        if(instruction != null) {
            if(instruction.getCommand().equals(Instruction.ROTATE)) {
                g2.translate(x, lidImage.getHeight(null));
                g2.rotate(-instruction.getRotation());
            }
        }
        
        
    }

    public void enableMouseDispatch(boolean state) {
        this.state = state;
    }
    

    private class MouseAdapter extends MouseInputAdapter {

        private MyGlassPane glassPane;
        private final JMenuBar menubar;

        public MouseAdapter(MyGlassPane glassPane) {
            this.glassPane = glassPane;
            menubar = menu.getMenuBar();
        }
        

        @Override
        public void mouseClicked(MouseEvent me) {
            if(state) {
                redispatchMouseEvent(me);
            }
        }

        @Override
        public void mousePressed(MouseEvent me) {
            if(state) {
                redispatchMouseEvent(me);
            }
        }

        @Override
        public void mouseReleased(MouseEvent me) {
            if(state) {
                redispatchMouseEvent(me);
            }
        }

        @Override
        public void mouseEntered(MouseEvent me) {
            if(state) {
                redispatchMouseEvent(me);
            }
        }

        @Override
        public void mouseExited(MouseEvent me) {
            if(state) {
                redispatchMouseEvent(me);
            }
        }

        @Override
        public void mouseDragged(MouseEvent me) {
            if(state) {
                redispatchMouseEvent(me);
            }
        }

        @Override
        public void mouseMoved(MouseEvent me) {
            if(state) {
                redispatchMouseEvent(me);
            }
        }
        
        

        private void redispatchMouseEvent(MouseEvent me) {
            Point glassPanePoint = me.getPoint();
            Point containerPoint = SwingUtilities.convertPoint(
                    glassPane,
                    glassPanePoint,
                    canvas);
            //we're not in the content pane
            if (containerPoint.y < 0) {
                //We're on the menubar
                if (containerPoint.y + menubar.getHeight() >= 0) {
                    
                    Point menuPoint = SwingUtilities.convertPoint(
                            glassPane, 
                            glassPanePoint, 
                            menubar);
                    
                    Component component = SwingUtilities.getDeepestComponentAt(
                        menubar,
                        menuPoint.x,
                        menuPoint.y);
                    
                        Point componentPoint = SwingUtilities.convertPoint(glassPane,
                            glassPanePoint, component);
                    
                    if (component != null) {
                        component.dispatchEvent(
                                new MouseEvent(
                                    component, 
                                    me.getID(), 
                                    me.getWhen(),
                                    me.getModifiers(),
                                    componentPoint.x,
                                    componentPoint.y,
                                    me.getClickCount(),
                                    me.isPopupTrigger()));
                    }
                    
                }
            } 
            else { //We're on the canvas
                /*Point componentPoint = SwingUtilities.convertPoint(
                        glassPane,
                        glassPanePoint,
                        canvas); */
                Point canvasPoint = SwingUtilities.convertPoint(glassPane, 
                        glassPanePoint, canvas);
                
                canvas.dispatchEvent(
                        new MouseEvent(
                            canvas,
                            me.getID(),
                            me.getWhen(),
                            me.getModifiers(),
                            canvasPoint.x,
                            canvasPoint.y,
                            me.getClickCount(),
                            me.isPopupTrigger()));
     

            }
        }
    }
}
