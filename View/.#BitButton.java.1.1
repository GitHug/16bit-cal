/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package View;

import java.awt.*;
import java.awt.geom.Rectangle2D;

/**
 * This class not yet implemented.
 * @author fredrikmakila
 */
public class BitButton extends CustomComponent {
    private String text;
    private Point p;
    private Dimension d;
    private int id;
    
    public BitButton(int x, int y, int width, int height, String text, int id) {
        super(x, y, width, height);
        this.text = text;
        this.id = id;
    }
    
    public BitButton(int x, int y, String imgName, int id) {
        super(x, y);   
    }

    @Override
    public void draw(Graphics g) {
        p = getLocation();
        d = getSize();
        Graphics2D g2d = (Graphics2D) g;
        //Sets antialiasing for smoother shapes
        g2d.setRenderingHint(
           RenderingHints.KEY_ANTIALIASING,                
           RenderingHints.VALUE_ANTIALIAS_ON);
        //Create a rectangle
        g.setColor(getBackgroundColor());
        g.fillRect(p.x, p.y, d.width, d.height);
        //Set font color
        g.setColor(Color.darkGray);
        
        //Gets available fonts and sets a font
        GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
        String []fontFamilies = ge.getAvailableFontFamilyNames(); 
        Font font = new Font(fontFamilies[0], Font.BOLD, 12);
        g.setFont(font);
        //Gets the width and height of the string
        Rectangle2D stringBounds = g.getFontMetrics().getStringBounds(text, g);
        g2d.drawString(text, p.x + (int) (d.width/2 - stringBounds.getCenterX()), p.y + (int) (d.height/2 - stringBounds.getCenterY()));
    }
}
