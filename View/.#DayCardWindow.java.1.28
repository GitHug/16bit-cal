
package View;

import Control.Interface.Observer;
import Model.Datatypes.Complete;
import Model.Datatypes.EventObject;
import Model.Datatypes.Priority;
import Model.Datatypes.TaskObject;
import Model.SixteenBitModel;
import Utils.Debug;
import Utils.OsUtils;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 * Initiates the window where the user can view tasks.
 * @author Robert
 */
public class DayCardWindow extends JFrame implements Observer {
    private ButtonPanel buttonpanel;
    private Container pane;
    private DefaultTableModel tableModel = new DefaultTableModel();
    private JTable table = new JTable();
    private DateFormat tdf = new SimpleDateFormat("yyyy-MM-dd");
    private DateFormat ttf = new SimpleDateFormat("HH:mm");
    private String sDates = "2012-12-12";
    private String sTimes = "12:12";        
    private Date tDate;
    private Date tTime;
    private Priority tprio = new Priority("normal");
    private Complete tcomp = new Complete("no");
    private TaskObject to;
    private ArrayList<TaskObject> Tasklist;
    private ArrayList<EventObject> Eventlist;
    private Point point = new Point();
    private JScrollPane scrollPane;
    
    /**
     * Constructor for the class. //For commit
     */
    public DayCardWindow(int width, int height) {
        //this.setResizable(false);
        setUndecorated(true);
        setAlwaysOnTop(true);
         
        setBackground(new Color(0,0,0,0));
        setSize(new Dimension(400,400));
          
        setSize(width, height);
        
        JPanel panel = new JPanel()
        {
            
     /**
     * Constructor to add a gradient background.
     * 
     * @param g The graphics.
     */
            
        @Override
        protected void paintComponent(Graphics g)
        {
           if (g instanceof Graphics2D)
           {
               final int R = 240;
               final int G = 240;
               final int B = 240;
               
               Paint p = new GradientPaint(0.8f, 0.8f, new Color(R, G, B, 40),
                       0.8f, getHeight(), new Color(R,G,B, 255), true);
               Graphics2D g2d = (Graphics2D)g;
               g2d.setPaint(p);
               g2d.fillRect(0,0, getWidth(), getHeight()); 
                       
           }
        }
        
        }; 
        setContentPane(panel);
        addComponentsToPane();
        
        addMouseListener(new MouseAdapter() {        
        
         /**
         * Method that is called everytime the mouse is pressed on the 
         * DayCardWindow.
         * @param e A mouse pressed event
         */
            @Override
            public void mousePressed(MouseEvent e) {
                if(!e.isMetaDown()) {
                    // gets the points x, y, where the mouse is pressed
                    point.x = e.getX();
                    point.y = e.getY();
                }
            }
    });
        
        addMouseMotionListener(new MouseMotionAdapter(){
            
         /**
         * Method that is called everytime the mouse is pressed and 
         * dragged on the DayCardWindow.
         * @param e A mouse dragged event
         */
            
            @Override
            public void mouseDragged(MouseEvent e) {
                if(!e.isMetaDown()) {
                    Point p = getLocation();
                    // sets the new location for the window when the 
                    // mouse is dragged. 
                    if(OsUtils.isWindows()) {
                        setLocation(p.x + e.getX() - point.x,
                            p.y + e.getY() - point.y); 
                    }
                    
                }
            }
        });
                }
    /**
     * Adds all the components(buttons etc.) to the DayCardWindow.
     */  
                
    private void addComponentsToPane() {
        pane = this.getContentPane();
        pane.setLayout(new GridBagLayout());
        GridBagConstraints c = new GridBagConstraints();
        
        SixteenBitModel model = SixteenBitModel.getInstance();        
        Tasklist = new ArrayList<TaskObject>();
        Eventlist = new ArrayList<EventObject>();
        
        //Getting list of tasks
        if(model.getTasks()!=null) {
            Tasklist = model.getTasks();
        }
        //Getting list of events
        if(model.getEvents()!=null) {
            Eventlist = model.getEvents();
        }
        
        tableModel.addColumn("TASKS");
        //Fill table
        for(int i =0;i<Tasklist.size();i++) {
            tableModel.addRow(new Object[]{Tasklist.get(i).getName()});
            System.out.println("Adding " + Tasklist.get(i).getName() + " to tablemodel");
        }
       /* tableModel.addColumn("EVENTS");
        //Fill table
        for(int i =0;i<Tasklist.size();i++) {
            tableModel.addRow(new Object[]{Eventlist.get(i).getName()});
        }*/
        
        System.out.println("Setting tableModel");
        table.setModel(tableModel);
        for(int i=0;i<tableModel.getRowCount();i++){
            System.out.println("Row "+i+" in tableModel: "+tableModel.getValueAt(i, 0));
        }
        Dimension d = new Dimension(300,300);
        scrollPane = new JScrollPane(table);
        scrollPane.setPreferredSize(d);
        
        table.setFillsViewportHeight(true);
      
        
        pane.add(scrollPane, c);
                        
        c.anchor = GridBagConstraints.PAGE_START;
        
        buttonpanel = new ButtonPanel(this);
        c.fill = GridBagConstraints.NONE;
        c.gridy = 2;
        c.weighty = 1.0;
        //c.insets = new Insets(10, 50, 5,50);
        c.anchor = GridBagConstraints.PAGE_END;
        pane.add(buttonpanel, c);  
               
    }
    
    /**
     * Removes the contents of content pane, adds new content to pane and
     * repaints the DayCardWindow.
     */
    public void updateGUI() {
        this.getContentPane().removeAll();
        addComponentsToPane();
        this.validate();
        this.repaint();
    }
    
    /**
     * @param event
     */
    @Override
    public void notify(Object event) {
        throw new UnsupportedOperationException("Not supported yet.");
    }
   
    
    
    public class CustomTableCellRenderer extends DefaultTableCellRenderer{
        @Override
        public Component getTableCellRendererComponent (JTable table, 
           Object obj, boolean isSelected, boolean hasFocus, int row, int column) {
            Component cell = super.getTableCellRendererComponent(
                                table, obj, isSelected, hasFocus, row, column);
            return cell;
        }
    }

    /**
     * A Custom List Cell Renderer for coloring the background according
     * to chosen category
     */
    /*public class CustomListCellRenderer extends DefaultListCellRenderer {
        
        private SixteenBitModel model = SixteenBitModel.getInstance();
        private ArrayList<CategoryObject> catobjects;
        private ArrayList<TaskObject> taskobjects;
        
        public CustomListCellRenderer() {
            
        }
        
        @Override
        public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
            taskobjects = model.getTasks();
            int r = 0;
            int s;
            //Parse the name from value
            while(value.toString().charAt(r)!= ','){
                r++;
            }
            r=r+8;
            s=r;
            while(value.toString().charAt(s)!=','){
                s++;
            }
            //set value to the name of the task in value
            value = value.toString().substring(r, s);
            value = value.toString().trim();
            //Check all tasks
            for(int i=0; i<taskobjects.size();i++){
              if(value.toString().equals(taskobjects.get(i).getName())){
                System.out.println("Found task with color: "+taskobjects.get(i).getCategory().getColor());
                return new TaskPanel(taskobjects.get(i));
              }
            }
            //if no match is found (unlikely) set TaskPanel with index value
            return new TaskPanel(taskobjects.get(index));
        }
    }*/
    

}

   
        

